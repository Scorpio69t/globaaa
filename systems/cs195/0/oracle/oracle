#!/usr/bin/python2

# Include any import statements needed here
from random import randint
from random import shuffle
from subprocess import Popen, PIPE
from sys import argv, exit
from scipy.special import binom

# hardcode upper limit of vertices
MAX = 200

# example from handout; for basic asserts
t1 = [(7, 11), (7, 8), (3, 10), (5, 11), (3, 8), (8, 9), (11, 10), (11, 2), (11, 9)]
o1 = [3, 5, 7, 11, 8, 9, 10, 2]

def generate_input(n):
    """ The function that generates a set of input DAGs to test the topsort
    program
    Inputs:
        - n: The number of DAGs to generate
    Outputs:
        - A list containing valid DAGs where each graph is represented as a list
          of edges, and each edge is represented as a pair (tuple) of source
          and destination.
    """
    # generate a random number of vertices, place in a list, then shuffle the list
    DAGS = []

    for i in range(0, n):

      vertices = []
      for i in range(1, randint(2, MAX) + 1):
        vertices.append(unicode(str(i), 'utf-8'))
      shuffle(vertices)

      dag = []

      length = len(vertices)
      for i in range(0, length):
        random_indices = []

	# generate a bunch of random indices
        for j in range(i + 1, length):
          random_indices.append(randint(i + 1, length - 1))

        for j in random_indices:
          dag.append((vertices[i], vertices[j]))

      shuffle(dag)
      DAGS.append(dag)

    return DAGS


# let's make sure all the elements in the output are the same as those from the input
def integrity_check(topsort_input, topsort_output):
  input = []

  # iterate over input adding elements to list
  for pair in topsort_input:
    (u, v) = pair

    if u not in input:
      input.append(u)

    if v not in input:
      input.append(v)

    # make sure every vertex in input is in output
  for vertex in input:
    if vertex not in topsort_output:
      return False
    else:
      topsort_output.remove(vertex)

  if not topsort_output:
    return True
  else:
    return False

assert(integrity_check([], []))
assert(integrity_check(t1, o1))
assert(not integrity_check(t1, o1[1:]))
assert(not integrity_check(t1, o1 + [12]))
assert(not integrity_check(t1 + [(7, 18)], o1))


# check to see if output list is topologically sorted
def is_sorted(topsort_input, topsort_output):
  visited = []

  for vertex in topsort_output:
    for pair in topsort_input:
      (u, v) = pair

      # if u points to v, then v must already be in our visited list
      if v == vertex:
        if u not in visited:
          return False

    visited.append(vertex)

  return True

assert(is_sorted([], []))
assert(is_sorted(t1, o1))
assert(is_sorted(t1, [3, 5, 7, 11, 8, 10, 2, 9]))
assert(not is_sorted(t1, [3, 5, 11, 9, 7, 8, 10, 2]))


def is_valid(topsort_input, topsort_output):
    """ The function that checks if a returned topsort output is the correctly
    topsorted verson of a topsort input
    Inputs:
        - topsort_input: The input given to the topsort program
        - topsort_output: The output returned by the topsort program
    Outputs:
        - Returns False if topsort_output does not correctly topsort
          topsort_input
        - Returns True if topsort_output does correctly topsort topsort_input
    """
    # Let's check 2 things: 1) integrity of output list i.e. has the same elements as input graph
    # and 2) sorted correctly
    if integrity_check(topsort_input[:], topsort_output[:]) and is_sorted(topsort_input[:], topsort_output[:]):
      return True
    else:
      return False


def oracle(f, n=120):
    """ The function that runs your entire oracle program.
    Inputs:
        - f: The path to the topological sorting program your oracle is
          evaluating
        - n: The number of inputs to test your oracle with. The default value
          is 120, but can be overridden by the function parameter
    Outputs:
        - No printed ouput if program succeeds. Exits with return code 0
    """
    n = int(n) # Converts parameter n into an integer
    for g in generate_input(n):
        # Runs the program contained in file f
        p = Popen(f, stdin=PIPE, stdout=PIPE, stderr=PIPE)
        # Passes topsort input to topsort program
        for u, v in g:
            p.stdin.write("{} {}\n".format(u, v).encode('utf-8'))
        p.stdin.close()

        # Gets the output of the topsort program
        s = []
        while True:
            line = p.stdout.readline().decode('utf-8')
            if line:
                s.append(line.rstrip())
            else:
                break

        # Checks the output of the topsort program
        if not is_valid(g, s) or p.stderr.readline():
            exit(1)

        # Waits for topsort program to finish
        p.stderr.close()
        p.wait()

        # Checks if topsort program returned a code signifying an error
        if p.returncode:
            exit(1)

    # Exits with return code 0 if the topsort program did not fail a test above
    exit(0)

# Calls your oracle function when the program is executed
oracle(argv[1], argv[2])
