[1, 2, 3, 4, 5, 1, 3, 6, 2, 1, 4, 7, 7, 4, 5, 6, 3, 4, 1]

LRU:

	[1, 2, 3, 4]	(1)

	[5, 2, 3, 4]	(2)

	[5, 1, 3, 4]	(3)

	[5, 1, 3, 6]	(4)

	[2, 1, 3, 6]	(5)

	[2, 1, 4, 6]	(6)

	[2, 1, 4, 7]	(7)

	[5, 1, 4, 7]	(8)

	[5, 6, 4, 7]	(9)

	[5, 6, 4, 3]	(10)

	[1, 6, 4, 3]	(11)

[1, 2, 3, 4, 5, 1, 3, 6, 2, 1, 4, 7, 7, 4, 5, 6, 3, 4, 1]

FIFO:

	[1, 2, 3, 4]	(1)

	[2, 3, 4, 5]	(2)

	[3, 4, 5, 1]	(3)

	[4, 5, 1, 6]	(4)

	[5, 1, 6, 2]	(5)

	[1, 6, 2, 4]	(6)

	[6, 2, 4, 7]	(7)

	[2, 4, 7, 5]	(8)

	[4, 7, 5, 6]	(9)

	[7, 5, 6, 3]	(10)

	[5, 6, 3, 4]	(12)

	[6, 3, 4, 1]	(13)


[1, 2, 3, 4, 5, 1, 3, 6, 2, 1, 4, 7, 7, 4, 5, 6, 3, 4, 1]

OPT:

	[1, 2, 3, 4]	(1)

	[1, 2, 3, 5]	(2)

	[1, 2, 6, 5]	(3)

	[1, 4, 6, 5]	(4)

	[7, 4, 6, 5]	(5)

	[7, 4, 3, 1]	(6)
		
	        first       last
original cache: [1, 2, 3, ..., k]

		so, what you do is (1) fill up the cache with {1, ..., k} elements. (2) then, have a sequence of {k, ..., 1}
		elements. this won't change the FIFO cache but it will reverse the LRU cache. (3) then call {(k + 1), 1, ..., {k - 1)}
		this'll miss every element in the FIFO cache but only one element in the LRU cache

				[1, 2, 3, 4]	<- initial cache

				(4, 3, 2, 1)	<- sequence

				[4, 3, 2, 1]	<- LRU cache

				[1, 2, 3, 4]	<- FIFO cache

				(5, 1, 2, 3)	<- 1 miss in the LRU cache and 4 in the FIFO cache

	        first       last
original cache: [1, 2, 3, ..., k]

				[1, 2, 3, 4]	<- initial cache

				(4, 3, 2, 1)	<- sequence

				[4, 3, 2, 1]	<- LRU cache
	
				[1, 2, 3, 4]	<- FIFO cache
	
				(5, 4, 3, 2)	<- 1 miss in the FIFO and 4 in the LRU

[1, 2, 3]

[1, 2, 3, 4]

(4, 1, 2, | 1 | 3, 4, 1, | 2 | 2, 3, 4, | 3 | 1, 2, 3, | 4 | 4, 1, 2, | 5 | 3, 4, 1, | 6 | 2, 3, 4, | 8 | 1, 2, 3, ...)

1: [1, 2, 4]

2: [1, 3, 4]

3: [2, 3, 4]

4: [2, 3, 1]

5: [2, 4, 1]

6: [3, 4, 1]

7: [3, 4, 2]

8: [3, 1, 2]
